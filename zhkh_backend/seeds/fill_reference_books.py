import asyncio
from typing import (
    Dict,
    List,
)

from app.config import (
    DB_URL,
    settings,
)
from app.infrastructure.orm.models import (
    ReferenceBook,
    ReferenceBookValue,
)
from app.infrastructure.postgres import Database
from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession

full_reference_data = {
    "Тип дома": ["Многоквартирный дом"],
    "Серия, тип постройки": [
        "1-447-С, Блочный",
        "1-447С, Блочный",
        "1-464 А",
        "1-464- А-14",
        "1-464-8, Блочный",
        "1-464-А, Блочный",
        "1-464-А, Панельный",
        "1-464-А-14, Блочный",
        "1-464-Д, Блочный",
        "1-464-Д, Панельный",
        "1-464-Д-83, Панельный",
        "1-464-Д-84, Панельный",
        "1-464-С, Блочный",
        "1-464А, Блочный",
        "1-465-А, Блочный",
        "1-465-А, Панельный",
        "1-467А, Блочный",
        "164-89-48/1, Кирпичный",
        "85, Кирпичный",
        "85-04-1",
        "85-04-1, Кирпичный",
        "93 М, Панельный",
        "93 МОЗ, Панельный",
        "93-М, Панельный",
        "Кр. блочные",
        "Нет данных",
        "Нет данных, Блочный",
        "Нет данных, Кирпичный",
        "Нет данных, Панельный",
        "Отсутствует",
    ],
    "Тип перекрытий": [
        "Железобетонные",
        "Монолитные железобетонные плиты",
        "Перекрытия из сборного железобетонного настила",
    ],
    "Материал несущих стен": [
        "Блочные",
        "Кирпич",
        "Монолитные железобетонные",
        "Стены из крупноразмерных блоков и однослойных несущих панелей",
        "Стены из несущих панелей",
        "Стены из слоистых железобетонных панелей",
        "Стены кирпичные",
        "Стены панельные",
    ],
    "Тип мусоропровода": ["На лестничной клетке", "Отсутствует"],
    "Класс энергетической эффективности": [
        "C",
        "D",
        "D (Пониженный)",
        "E",
        "Не присвоен",
    ],
    "Формирование фонда кап. ремонта": [
        "На специальном счете у регионального оператора",
        "На счете регионального оператора",
    ],
    "Наличие в подъездах приспособлений для нужд маломобильных групп населения": [
        "Да",
        "Нет",
    ],
    "Статус объекта культурного наследия": ["Да", "Нет"],
    "Вентиляция": ["Приточно-вытяжная вентиляция"],
    "Водоотведение": ["Централизованная канализация", "Центральное"],
    "Система водостоков": ["Внутренние водостоки", "Отсутствует"],
    "Газоснабжение": ["Отсутствует", "Нет"],
    "Горячее водоснабжение": [
        "Открытая с отбором сетевой воды на горячее водоснабжение из тепловой сети",
        "Тупиковая",
        "Центральное",
    ],
    "Система пожаротушения": ["Автоматическая", "Отсутствует"],
    "Теплоснабжение": ["Центральная", "Центральное"],
    "Холодное водоснабжение": ["Тупиковая", "Центральное"],
    "Электроснабжение": ["Центральное"],
    "Несущие стены": [
        "Блочные",
        "Кирпич",
        "Монолитные железобетонные",
        "Стены из крупноразмерных блоков и однослойных несущих панелей",
        "Стены из несущих панелей",
        "Стены из слоистых железобетонных панелей",
        "Стены кирпичные",
        "Стены панельные",
    ],
    "Тип системы горячего водоснабжения": ["Тупиковая", "Центральное"],
    "Материал сети": [
        "Полимер",
        "Полимер, Сталь оцинкованная",
        "Полимер, Сталь черная",
        "Сталь",
        "Сталь черная",
        "Чугун",
        "Пластик",
        "Пластик, чугун",
        "Чугун",
    ],
    "Материал теплоизоляции сети": [
        "Минеральная вата с покрытием",
        "Минеральная вата с покрытием из алюминиевой фольги",
    ],
    "Материал стояков": ["Полимер", "Полимер, Сталь черная", "Сталь черная"],
    "Тип системы водоотведения": ["Централизованная канализация"],
    "Тип системы газоснабжения": ["Нет"],
    "Тип фундамента": ["Ленточный", "Монолитная железобетонная фундаментная плита"],
    "Материал фундамента": ["Монолитный железобетон", "Сборный железобетон"],
    "Тип внутренних стен": [
        "Стены деревянные каркасные",
        "Стены деревянные, сборно-щитовые",
        "Стены из крупноразмерных блоков и однослойных несущих панелей",
        "Стены из монолитного железобетона",
        "Стены из несущих панелей",
        "Стены из слоистых железобетонных панелей",
        "Стены кирпичные",
    ],
    "Тип наружных стен": [
        "Монолитные железобетонные",
        "Стены из крупноразмерных блоков и однослойных несущих панелей",
        "Стены из несущих панелей",
        "Стены из слоистых железобетонных панелей",
        "Стены кирпичные",
        "Стены панельные",
    ],
    "Тип наружного утепления фасада": [
        "Минвата",
        "Нет",
        "Обшивка металлосайдингом с утеплителем",
    ],
    "Материал отделки фасада": [
        "Керамогранит",
        "Нет",
        "Сайдинг",
        "без отделки",
        "окраска",
        "окраска по штукатурке",
        "панель с заводской отделкой",
    ],
    "Форма крыши": ["Двускатная", "Плоская"],
    "Утепляющие слои чердачных перекрытий": ["Керамзит или шлак", "Нет"],
    "Вид несущей части": [
        "Деревянные",
        "Железобетонные сборные (чердачные)",
        "Совмещенная",
        "Совмещенные из сборных железобетонных слоистых панелей",
    ],
    "Тип кровли": [
        "Мягкая",
        "Рулонная",
        "Шиферная",
        "Шиферная, Стальная (металлическая)",
    ],
    "Материал окон": ["Деревянные", "Пластиковые", "Нет"],
    "Тип поквартирной разводки внутридомовой системы отопления": ["Вертикальная"],
    "Материал": [
        "Медь",
        "Полимер",
        "Полимер, Сталь черная",
        "Сталь оцинкованная",
        "Сталь черная",
    ],
    "Тип отопительных приборов": ["Конвектор", "Радиатор"],
}


async def seed_insert_reference_books(
    session: AsyncSession, full_reference_data: Dict[str, List[str]]
):
    async with session.begin():
        existing_reference_book = await session.execute(select(ReferenceBook.id).limit(1))
        if existing_reference_book.scalars().first() is not None:
            print("Справочники уже есть в базе, сид пропущен")
            return

        name_to_refbook = {}

        for ref_name in full_reference_data:
            refbook = ReferenceBook(name=ref_name)
            session.add(refbook)
            name_to_refbook[ref_name] = refbook

        await session.flush()

        created_instances = []
        for ref_name, values in full_reference_data.items():
            refbook = name_to_refbook[ref_name]
            for value in values:
                created_instances.append(
                    ReferenceBookValue(reference_book_id=refbook.id, value=value)
                )

        session.add_all(created_instances)
        await session.commit()


async def main():
    database = Database(settings.POSTGRES, DB_URL)
    database.connect()
    try:
        async with database.async_context() as session:
            await seed_insert_reference_books(session, full_reference_data)
    finally:
        await database.close()


if __name__ == "__main__":
    asyncio.run(main())
